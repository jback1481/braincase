// $Id$/*var xmlObject:XML; // If you want it globalfunction loadXML(XMLFilename:String, xmlObject:XML) :void {  var XMLPath:String = "xml/";  var myXMLLoader:XMLLoader = new XMLLoader(XMLPath + XMLFilename);  myXMLLoader.addEventListener (Event.COMPLETE, makeXMLObject);    function makeXMLObject (event:Event):void {    xmlObject = myXMLLoader.p_XML;    trace (xmlObject);    numChildren = xmlObject.child("*").length();  }}*/package {  import flash.net.URLLoader;  import flash.net.URLRequest;  import flash.xml.*;  import flash.events.Event;  import flash.events.EventDispatcher;  import flash.events.IEventDispatcher;  import flash.events.IOErrorEvent;  public class XMLLoader extends EventDispatcher {    private var importedXML:XML;    private var loader:URLLoader;    public function XMLLoader (dataPath:String) {      var request:URLRequest = new URLRequest(dataPath);      loader = new URLLoader();            try {        loader.load (request);      } catch (error:SecurityError) {        trace ("SecurityError:");      }      loader.addEventListener (IOErrorEvent.IO_ERROR, errorHandler);      loader.addEventListener (Event.COMPLETE, loaderComplete);    }    private function loaderComplete (event:Event) {      try {        importedXML = new XML(loader.data);        dispatchEvent (new Event(Event.COMPLETE));      } catch (e:TypeError) {        trace ("XML parsing error:"+e);      }    }    private function errorHandler (event:IOErrorEvent):void {      trace ("Had problem loading the XML File. Event:"+event);    }        // Property access    public function get p_XML ():XML {      return importedXML;    }  }}