package com.capdig.loader{    import flash.events.*;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.net.URLRequest;    import com.capdig.loader.BaseLoader;    public class AudioLoader extends BaseLoader    {        public static const SOUND_COMPLETE:String = 'sound_completed';        private var soundFactory:Sound;        private var channel:SoundChannel;        private var isPlaying:Boolean;        private var soundComplete:Boolean;        private var loopEnable:Boolean;        private var percentLoaded:int = 0;                public function AudioLoader():void        {            soundFactory = new Sound();                        // Configure the listeners for the sound object            configureListeners(soundFactory);        }        // Configure listeners for loader debugging        private function configureListeners(dispatcher:IEventDispatcher):void        {            dispatcher.addEventListener(Event.COMPLETE, _completeHandler);            dispatcher.addEventListener(Event.ID3, _id3Handler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, _ioErrorHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, _progressHandler);        }                private function _completeHandler(e:Event):void        {            trace("AudioLoader completeHandler: " + e);            dispatchEvent (new Event(Event.COMPLETE));        }                public function _loadAudio(audioPath:String, loop:Boolean)        {            // Assign the file path to the URLrequest            var request:URLRequest = new URLRequest(audioPath);                        try            {                soundFactory.load(request);            }            catch (e:SecurityError)            {                trace ("AudioLoader securityError: "+e);            }                        loopEnable = loop;            soundComplete = false;        }                public function _soundPlay():void        {            channel = soundFactory.play();            isPlaying = true;            soundComplete = false;            channel.addEventListener(Event.SOUND_COMPLETE, _soundCompleted);        }                public function _soundStop():void        {            channel.stop();            isPlaying = false;            channel.removeEventListener(Event.SOUND_COMPLETE, _soundCompleted);        }                public function _soundCompleted(event:Event):void        {            dispatchEvent (new Event(Event.SOUND_COMPLETE));            isPlaying = false;            soundComplete = true;                        if (loopEnable == true)            {                channel = soundFactory.play();            }        }                // Property access        public function get _isPlaying ():Boolean        {            return isPlaying;        }                public function get _isComplete ():Boolean        {            return soundComplete;        }    }}