// $Id$package com.motobug.loaders {  import flash.events.*;  import flash.media.Sound;  import flash.media.SoundChannel;  import flash.net.URLRequest;  import org.flashdevelop.utils.FlashConnect;  public class SoundLoader {    private var _soundFactory:Sound;    private var _channel:SoundChannel;    private var _isPlaying:Boolean;    private var _soundComplete:Boolean;    private var _loopEnable:Boolean;      public function SoundLoader(request:URLRequest, loop:Boolean):void {      _loopEnable = loop;      _soundComplete = false;      _soundFactory = new Sound();      configureListeners(_soundFactory);            try {        _soundFactory.load(request);      } catch (e:SecurityError) {        trace ("SecurityError: "+e);      }    }        // Configure listeners for loader debugging    private function configureListeners(dispatcher:IEventDispatcher):void {      dispatcher.addEventListener(Event.COMPLETE, soundPlay);      dispatcher.addEventListener(Event.ID3, id3Handler);      dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);      dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);    }        private function completeHandler(e:Event):void {      //trace("completeHandler: " + e);    }        private function id3Handler(e:Event):void {      //trace("id3Handler: " + e);    }        private function ioErrorHandler(e:Event):void {      //trace("ioErrorHandler: " + e);    }        private function progressHandler(e:ProgressEvent):void {      //trace("progressHandler: " + e);    }        public function soundCompleted():void {      _soundComplete = true;      if (_loopEnable == true) {        _channel = _soundFactory.play();      }    }        public function soundPlay(e:Event):void {      _channel = _soundFactory.play();      _isPlaying = true;      _soundComplete = false;      _channel.addEventListener(Event.SOUND_COMPLETE, soundCompleted, false, 0, true);    }        public function soundStop():void {      _channel.stop();      _channel.removeEventListener(Event.SOUND_COMPLETE, soundCompleted);    }        // Property access    public function get isPlaying ():Boolean {      return _isPlaying;    }        public function set isPlaying (value:Boolean):void {      _isPlaying = value;    }        public function get isComplete ():Boolean {      return _soundComplete;    }  }}