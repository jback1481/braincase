// $Id$/*// Usage:import org.smm.attract.attractTimer;// Create Timeoutvar quizTimeout:AttractTimer = new AttractTimer(180 * 1000);// Attract screen timer// Checks to see if the timeout interval has been reached// If so, sends the playhead to the attract loopfunction checkTimeout (event:Event):void {  if (quizTimeout.p_intervalComplete == true) {    SoundMixer.stopAll();    quiz_mc.gotoAndStop ("attract");    quiz_mc.removeEventListener (Event.ENTER_FRAME, checkTimeout);  }}// To reset the timeout objectquizTimeout.p_lastInterval = getTimer();// Assign timeout listenersquiz_mc.addEventListener (Event.ENTER_FRAME, quizTimeout.checkTime);quiz_mc.addEventListener (Event.ENTER_FRAME, checkTimeout);*/package {  import flash.utils.getTimer;  import flash.events.Event;  public class AttractTimer {    private var _delay:Number;    private var _currentTime:Number;    private var _lastInterval:Number;    private var _intervalComplete:Boolean;    public function AttractTimer (myDelay:Number):void    {      _delay = myDelay;      _currentTime;      _lastInterval = getTimer();      _intervalComplete = false;    }        // Attract loop timer    public function checkTime (event:Event):void    {      _currentTime = getTimer();      if ((_currentTime - _lastInterval) > _delay)      {        //trace ("Time's Up!");        _intervalComplete = true;      }    }        // Property access    public function get p_lastInterval ():Number    {      return _lastInterval;    }        public function set p_lastInterval (setValue:Number):void    {      _lastInterval = setValue;    }        public function get p_intervalComplete ():Boolean    {      return _intervalComplete;    }        public function set p_intervalComplete (setValue:Boolean):void    {      _intervalComplete = setValue;    }        public function get p_delay ():Number    {      return _delay;    }        public function get p_currentTime ():uint    {      return _currentTime;    }  }}